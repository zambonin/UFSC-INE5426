Łukasiewicz is a procedural, strongly and statically typed language, with
lexical scope and reserved words, where the operations are output in prefix
notation.

This compiler generates the syntax tree for given Łukasiewicz code. It
currently supports logic and arithmetic operations with integers, floats and
booleans, that optionally can be saved in variables and arrays, as well as
if, else and for constructs.

Valid arguments for `batch_test.sh` match the following regex: 0?[1-8]

Known issues:
  * all input files must end with a new line
  * on the first line of a scope, if two consecutive syntax errors are
    input, new syntax error messages must be enabled again with a new line
    or a valid input
  * inputs with syntax errors may print extra newlines on the output

Outputs consisting of error messages may be generated with:

  for i in tests/invalid/*.in ; do \
    ./lukacompiler < "$i" 1>/dev/null 2> "${i/.in/.out}" ; \
  done
